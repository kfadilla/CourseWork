#lang racket
;;HW3

(define value-of
  (lambda (exp env)
    (match exp
      [`,y #:when (symbol? y)
           (env y)]
      [`,y #:when (number? y)
           y]
      [`,y #:when(boolean? y)
           y]
      [`(zero? ,exp)
       (= (value-of exp env) 0)]
      [`(sub1 ,exp)
       (- (value-of exp env) 1)]
      [`(* ,exp1 ,exp2)
       (* (value-of exp1 env)
          (value-of exp2 env))]
      [`(if ,condi ,whentrue ,whenfalse)
       (if (value-of condi env)
           (value-of whentrue env)
           (value-of whenfalse env))]
      [`(let ((,x ,y)) ,body)
       (let ([z (value-of y env)])
         (value-of body
                   (lambda (i)
                     (if (eqv? x i)
                         z
                         (env i)))))]
      [`(lambda (,x) ,body)
       (lambda (i)
         (value-of body
                   (lambda (y)
                     (if (eqv? x y)
                         i
                         (env y)))))]
      [`(,rator ,rand)
       ((value-of rator env)
        (value-of rand env))]
      )))



(define value-of-fn
  (lambda (exp env)
    (match exp
      [`,y #:when (symbol? y)
           (apply-env-fn env y)]
      [`,y #:when (number? y)
           y]
      [`,y #:when (boolean? y)
           y]
      [`(zero? ,exp)
       (= (value-of-fn exp env) 0)]
      [`(sub1 ,exp)
       (- (value-of-fn exp env) 1)]
      [`(* ,exp1 ,exp2)
       (* (value-of-fn exp1 env)
          (value-of-fn exp2 env))]
      [`(if ,condi ,whentrue ,whenfalse)
       (if (value-of-fn condi env)
           (value-of-fn whentrue env)
           (value-of-fn whenfalse env))]
      [`(let ((,x ,y)) ,body)
       (let ([z (value-of-fn y env)])
         (value-of-fn body (extend-env-fn x z env)))]
      [`(lambda (,y) ,body)
       (lambda (x)
         (value-of-fn body (extend-env-fn y x env)))]
      [`(,rator ,rand)
       ((value-of-fn rator env)
        (value-of-fn rand env))]
      )))

;;empty-env
(define empty-env-fn
  (lambda ()
    (lambda (y)
      (error 'value-of "unbound variable ~s" y))))

;apply-env-fn
(define apply-env-fn
  (lambda (env y)
    (env y)))

;extend-env-fn
(define extend-env-fn
  (lambda (x exp env)
    (lambda (y)
      (if (eqv? x y)
          exp
          (apply-env-fn env y)))))



;;value-of-ds
(define value-of-ds
  (lambda (exp env)
    (match exp
      [`,y #:when (symbol? y)
           (apply-env-ds env y)]
      [`,y #:when (number? y)
           y]
      [`,y #:when (boolean? y)
           y]
      [`(zero? ,exp)
       (= (value-of-ds exp env) 0)]
      [`(sub1 ,exp)
       (- (value-of-ds exp env) 1)]
      [`(* ,exp1 ,exp2)
       (* (value-of-ds exp1 env)
          (value-of-ds exp2 env))]
      [`(if ,condi ,whentrue ,whenfalse)
       (if (value-of-ds condi env)
           (value-of-ds whentrue env)
           (value-of-ds whenfalse env))]
      [`(let ((,y ,x)) ,body)
       (let ([z (value-of-ds x env)])
         (value-of-ds body (extend-env-ds y z env)))]
      [`(lambda (,y) ,body)
       (lambda (x)
         (value-of-ds body (extend-env-ds y x env)))]
      [`(,rator ,rand)
       ((value-of-ds rator env)
        (value-of-ds rand env))]
      )))

;;apply-env-ds
(define apply-env-ds
  (lambda (env y)
    (match env
      [`(empty-env)
       'error]
      [`(extend-env-ds ,x ,i ,env)
       (if (eqv? x y)
           i
           (apply-env-ds env y))]
      )))

;;extend-env-ds
(define extend-env-ds
  (lambda (x i env)
    `(extend-env-ds ,x ,i ,env)))

;;empty-env-ds
(define empty-env-ds
  (lambda ()
    `(empty-env)))



;;fo-eulav
(define fo-eulav
  (lambda (exp env)
    (match exp
      [`,y #:when (symbol? y)
           (env y)]
      [`,y #:when (number? y)
           y]
      [`,y #:when (boolean? y)
           y]
      [`(,exp ?orez)
       (= (fo-eulav exp env) 0)]
      [`(,exp 1bus)
       (- (fo-eulav exp env) 1)]
      [`(,exp1 ,exp2 *)
       (* (fo-eulav exp2 env)
          (fo-eulav exp1 env))]
      [`(,whenfalse ,whentrue ,condi fi)
       (if (fo-eulav condi env)
           (fo-eulav whentrue env)
           (fo-eulav whenfalse env))]
      [`(,body ((,x ,y)) tel)
       (let ([a (fo-eulav x env)])
         (fo-eulav body
                   (lambda (i)
                     (if (eqv? y i)
                         a
                         (env i)))))]
      [`(,body (,y) adbmal)
       (lambda (i)
         (fo-eulav body
                   (lambda (x)
                     (if (eqv? y x)
                         i
                         (env x)))))]
      
      [`(,rand ,rator)
       ((fo-eulav rator env)
        (fo-eulav rand env))]
      )))

;;empty-env
(define empty-env
  (lambda ()
    (lambda (y)
      (error 'fo-eulav "unbound variable ~s" y))))


(define apply-env-lex list-ref)

(define empty-env-lex 
  (lambda () '()))

(define extend-env-lex cons)

(define value-of-lex
  (lambda(exp env)
    (match exp
      [`(const ,c) #:when (or (boolean? c) (number? c)) c]
      [`(sub1 ,body) (sub1 (value-of-lex body env))]
      [`(zero ,body) (zero? (value-of-lex body env))]
      [`(* ,n1 ,n2) (* (value-of-lex n1 env) (value-of-lex n2 env))]
      [`(if ,t ,c ,a) (if (value-of-lex t env) (value-of-lex c env) (value-of-lex
                                                                     a env))]
      [`(var ,num) (apply-env-lex env num)]
      [`(lambda ,body) (lambda (a) (value-of-lex body (extend-env-lex a env)))]
      [`(,rator ,rand) ((value-of-lex rator env) (value-of-lex rand env))])))

