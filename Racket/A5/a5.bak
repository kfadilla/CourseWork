#lang racket

(define empty-env
  (lambda ()
    (lambda (var) (error 'value-of "unbound variable ~s" var))))
(define apply-env
  (lambda (env var)
    (env var)))
(define extend-env
  (lambda (id arg env)
    (lambda (var)
      (if (eqv? id var)
          arg
          (apply-env env var)))))
(define apply-closure
  (lambda (c a)
    (c a)))
(define make-closure-cbv
  (lambda (x body env)
    (lambda (a)
      (val-of-cbv body (extend-env x a env))
      )))
(define make-closure-cbr
  (lambda (x body env)
    (lambda (a)
      (val-of-cbr body (extend-env x a env))
      )))
(define make-closure-cbname
  (lambda (x body env)
    (lambda (a)
      (val-of-cbname body (extend-env x a env))
      )))

(define make-closure-cbneed
  (lambda (x body env)
    (lambda (a)
      (val-of-cbneed body (extend-env x a env))
      )))

;Call-by-value:
(define val-of-cbv
  (lambda (exp env)
    (match exp
      [`,y #:when(boolean? y) y]
      [`,y #:when(number? y) y]
      [`,y #:when(symbol? y) (unbox (apply-env env y))]
      [`(zero? ,y) (zero? (val-of-cbv y env))]
      [`(sub1 ,y) (sub1 (val-of-cbv y env))]
      [`(* ,n1 ,n2) (* (val-of-cbv n1 env) (val-of-cbv n2 env))]
      [`(if ,test ,conseq ,alt) (if (val-of-cbv test env)
                                    (val-of-cbv conseq env)
                                    (val-of-cbv alt env))]
      [`(random ,y) (random (val-of-cbv y env))]
      [`(begin2 ,e1 ,e2) (begin (val-of-cbv e1 env) (val-of-cbv e2 env))]
      [`(set! ,y ,exp) (set-box! (apply-env env y) (val-of-cbv exp env))]
      [`(lambda (,x) ,body) (make-closure-cbv x body env)]
      [`(,rator ,rand) (apply-closure (val-of-cbv rator env)
                                      (box (val-of-cbv rand env)))]
      )))


(define val-of-cbr
  (lambda (exp env)
    (match exp
      [`,y #:when(boolean? y) y]
      [`,y #:when(number? y) y]
      [`,y #:when(symbol? y) (unbox (apply-env env y))]
      [`(zero? ,y) (zero? (val-of-cbr y env))]
      [`(sub1 ,y) (sub1 (val-of-cbr y env))]
      [`(* ,n1 ,n2) (* (val-of-cbr n1 env) (val-of-cbr n2 env))]
      [`(if ,test ,conseq ,alt) (if (val-of-cbr test env)
                                    (val-of-cbr conseq env)
                                    (val-of-cbr alt env))]
      [`(random ,y) (random (val-of-cbr y env))]
      [`(begin2 ,e1 ,e2) (begin (val-of-cbr e1 env) (val-of-cbr e2 env))]
      [`(set! ,y ,exp) (set-box! (apply-env env y) (val-of-cbr exp env))]
      [`(lambda (,x) ,body) (make-closure-cbr x body env)]
      [`(,rator ,x) #:when (symbol? x) (apply-closure (val-of-cbr rator env)
                                                      (apply-env env x))]
      [`(,rator ,rand) (apply-closure (val-of-cbr rator env)
                                      (box (val-of-cbr rand env)))]
      )))
;Call-by-name:
(define val-of-cbname
  (lambda (exp env)
    (match exp
      [`,y #:when(boolean? y) y]
      [`,y #:when(number? y) y]
      [`,y #:when(symbol? y) ((unbox (apply-env env y)))]
      [`(zero? ,y) (zero? (val-of-cbname y env))]
      [`(sub1 ,y) (sub1 (val-of-cbname y env))]
      [`(* ,n1 ,n2) (* (val-of-cbname n1 env) (val-of-cbname n2 env))]
      [`(if ,test ,conseq ,alt) (if (val-of-cbname test env)
                                    (val-of-cbname conseq env)
                                    (val-of-cbname alt env))]
      [`(random ,y) (random (val-of-cbname y env))]
      [`(begin2 ,e1 ,e2) (begin (val-of-cbname e1 env) (val-of-cbname e2 env))]
      [`(set! ,y ,exp) (set-box! (apply-env env y) (val-of-cbname exp env))]
      [`(lambda (,x) ,body) (make-closure-cbname x body env)]
      [`(,rator ,x) #:when (symbol? x) (apply-closure (val-of-cbname rator env)
                                                      (apply-env env x))]
      [`(,rator ,rand) (apply-closure (val-of-cbname rator env)
                                      (box (lambda () (val-of-cbname rand env))))]
      )))
;Call-by-need:
(define unbox/need
  (lambda (x)
    (let
        ([val ((unbox x))])
      (set-box! x (lambda () val))
      val)))
(define val-of-cbneed
  (lambda (exp env)
    (match exp
      [`,y #:when(boolean? y) y]
      [`,y #:when(number? y) y]
      [`,y #:when(symbol? y) ((unbox/need (apply-env env y)))]
      [`(zero? ,y) (zero? (val-of-cbneed y env))]
      [`(sub1 ,y) (sub1 (val-of-cbneed y env))]
      [`(* ,n1 ,n2) (* (val-of-cbneed n1 env) (val-of-cbneed n2 env))]
      [`(if ,test ,conseq ,alt) (if (val-of-cbneed test env)
                                    (val-of-cbneed conseq env)
                                    (val-of-cbneed alt env))]
      [`(random ,y) (random (val-of-cbneed y env))]
      [`(begin2 ,e1 ,e2) (begin (val-of-cbneed e1 env) (val-of-cbneed e2 env))]
      [`(set! ,y ,exp) (set-box! (apply-env env y) (val-of-cbneed exp env))]
      [`(lambda (,x) ,body) (make-closure-cbneed x body env)]
      [`(,rator ,x) #:when (symbol? x) (apply-closure (val-of-cbneed rator env)
                                                      (apply-env env x))]
      [`(,rator ,rand) (apply-closure (val-of-cbneed rator env)
                                      (box (lambda () (val-of-cbneed rand env))))]
      )))
