#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 65 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 0
1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1           0 1718 9          49 21           0 0           0 7 0
28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"parenthec.rkt\""
0 0 24 3 1 #")"
0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 16 #"define-registers"
0 0 24 3 1 #" "
0 0 14 3 2 #"y^"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"clos^"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 2 #"a^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 22 #"define-program-counter"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-union"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 14 3 4 #"cexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 6 #"conseq"
0 0 24 3 1 #" "
0 0 14 3 3 #"alt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"mult"
0 0 24 3 1 #" "
0 0 14 3 5 #"nexp1"
0 0 24 3 1 #" "
0 0 14 3 5 #"nexp2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 4 #"nexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"zero"
0 0 24 3 1 #" "
0 0 14 3 4 #"nexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"letcc"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"kexp"
0 0 24 3 1 #" "
0 0 14 3 4 #"vexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 15 #")              "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"app"
0 0 24 3 1 #" "
0 0 14 3 5 #"rator"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";env"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-union"
0 0 24 3 1 #" "
0 0 14 3 4 #"envr"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"empty-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"extend-env"
0 0 24 3 1 #" "
0 0 14 3 2 #"a^"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-label"
0 0 24 3 1 #" "
0 0 14 3 9 #"apply-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"union-case"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"envr"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 85
(
 #";[(extend-env a^ env^) (if (zero? y^) (apply-k k^ a^) (apply-env env"
 #"^ (sub1 y^) k^))]"
) 0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 10 #"extend-env"
0 0 24 3 1 #" "
0 0 14 3 2 #"a^"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 2 #"y^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 2 #"a^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 7 #"apply-k"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"y^"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 2 #"y^"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 9 #"apply-env"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 9 #"empty-env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"value-of"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"unbound"
0 0 19 3 12 #" identifier\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; closure"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-union"
0 0 24 3 1 #" "
0 0 14 3 4 #"clos"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"closure"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-label"
0 0 24 3 1 #" "
0 0 14 3 13 #"apply-closure"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"union-case"
0 0 24 3 1 #" "
0 0 14 3 5 #"clos^"
0 0 24 3 1 #" "
0 0 14 3 4 #"clos"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 73
(
 #";[(closure body^ env^) (value-of-cps body^ (envr_extend-env a^ env^)"
 #" k^)]"
) 0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 7 #"closure"
0 0 24 3 1 #" "
0 0 14 3 5 #"body^"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 5 #"body^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 15 #"envr_extend-env"
0 0 24 3 1 #" "
0 0 14 3 2 #"a^"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; continuation"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-union"
0 0 24 3 1 #" "
0 0 14 3 2 #"kt"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"empty-k"
0 0 24 3 1 #" "
0 0 14 3 8 #"dismount"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"mult-inner-k"
0 0 24 3 1 #" "
0 0 14 3 2 #"v^"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"mult-outer-k"
0 0 24 3 1 #" "
0 0 14 3 6 #"nexp2^"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 18 #"sub1-constructor-k"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 18 #"zero-constructor-k"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"if-constructor-k"
0 0 24 3 1 #" "
0 0 14 3 7 #"conseq^"
0 0 24 3 1 #" "
0 0 14 3 4 #"alt^"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"throw-inner-k"
0 0 24 3 1 #" "
0 0 14 3 5 #"vexp^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"throw-outer-k"
0 0 24 3 1 #" "
0 0 14 3 5 #"kexp^"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"let-constructor-k"
0 0 24 3 1 #" "
0 0 14 3 5 #"body^"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"app-inner-k"
0 0 24 3 1 #" "
0 0 14 3 2 #"v^"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"app-outer-k"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand^"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; interpreter"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-label"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"union-case"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 28 #";[(const cexp) (let* ([k k^]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 33 #";                     [var cexp])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 34 #";                (apply-k k var))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 5 #"const"
0 0 24 3 1 #" "
0 0 14 3 4 #"cexp"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 4 #"cexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 7 #"apply-k"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 64
#";[(mult nexp1 nexp2) (let* ([k^ (kt_mult-outer-k nexp2 env^ k^)]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 47 #";                           [expression nexp1])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 58
#";                      (value-of-cps expression env^ k^))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 4 #"mult"
0 0 24 3 1 #" "
0 0 14 3 5 #"nexp1"
0 0 24 3 1 #" "
0 0 14 3 5 #"nexp2"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 5 #"nexp1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 15 #"kt_mult-outer-k"
0 0 24 3 1 #" "
0 0 14 3 5 #"nexp2"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 52 #";[(sub1 nexp) (let* ([k^ (kt_sub1-constructor-k k^)]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 39 #";                    [expression nexp])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 51 #";               (value-of-cps expression env^ k^))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 4 #"nexp"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"nexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 21 #"kt_sub1-constructor-k"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 52 #";[(zero nexp) (let* ([k^ (kt_zero-constructor-k k^)]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 39 #";                    [expression nexp])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 51 #";               (value-of-cps expression env^ k^))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 4 #"zero"
0 0 24 3 1 #" "
0 0 14 3 4 #"nexp"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"nexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 21 #"kt_zero-constructor-k"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 75
(
 #";[(if test conseq alt) (let* ([k^ (kt_if-constructor-k conseq alt en"
 #"v^ k^)]"
) 0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 48 #";                             [expression test])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 60
#";                        (value-of-cps expression env^ k^))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 6 #"conseq"
0 0 24 3 1 #" "
0 0 14 3 3 #"alt"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 19 #"kt_if-constructor-k"
0 0 24 3 1 #" "
0 0 14 3 6 #"conseq"
0 0 24 3 1 #" "
0 0 14 3 3 #"alt"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 54 #";[(letcc body) (let* ([env^ (envr_extend-env k^ env^)]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 41 #";                      [expression body])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 53 #";                 (value-of-cps expression env^ k^))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 15 3 5 #"letcc"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 15 #"envr_extend-env"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 60
#";[(throw kexp vexp) (let* ([k^ (kt_throw-outer-k vexp env^)]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 45 #";                          [expression kexp])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 57 #";                     (value-of-cps expression env^ k^))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 5 #"throw"
0 0 24 3 1 #" "
0 0 14 3 4 #"kexp"
0 0 24 3 1 #" "
0 0 14 3 4 #"vexp"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"kexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 16 #"kt_throw-outer-k"
0 0 24 3 1 #" "
0 0 14 3 4 #"vexp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 64
#";[(let exp body) (let* ([k^ (kt_let-constructor-k body env^ k^)]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 41 #";                       [expression exp])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 54 #";                  (value-of-cps expression env^ k^))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 20 #"kt_let-constructor-k"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 23 #";[(var n) (let* ([y^ n]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 28 #";                [env env^])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 35 #";           (apply-env env y^ k^))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"y^"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 9 #"apply-env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 29 #";[(lambda body) (let* ([k k^]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 54 #";                      [var (clos_closure body env^)])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 35 #";                 (apply-k k var))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 12 #"clos_closure"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 7 #"apply-k"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 60
#";[(app rator rand) (let* ([k^ (kt_app-outer-k rand env^ k^)]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 45 #";                         [expression rator])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 56 #";                    (value-of-cps expression env^ k^))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 3 #"app"
0 0 24 3 1 #" "
0 0 14 3 5 #"rator"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 5 #"rator"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 14 #"kt_app-outer-k"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-label"
0 0 24 3 1 #" "
0 0 14 3 7 #"apply-k"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"union-case"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 2 #"kt"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 27 #";[(empty-k) (let* ([v var])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 17 #";             v)]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 7 #"empty-k"
0 0 24 3 1 #" "
0 0 14 3 8 #"dismount"
0 0 24 3 3 #") ("
0 0 14 3 19 #"dismount-trampoline"
0 0 24 3 1 #" "
0 0 14 3 8 #"dismount"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 38 #";[(mult-inner-k var^ k^) (let* ([k k^]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 51 #";                               [var (* var var^)])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 44 #";                          (apply-k k var))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 12 #"mult-inner-k"
0 0 24 3 1 #" "
0 0 14 3 4 #"var^"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 4 #"var^"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 7 #"apply-k"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 58
#";[(mult-outer-k nexp2^ env^ k^) (let* ([expression nexp2^]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 70
(
 #";                                       [k^ (kt_mult-inner-k var k^)"
 #"])"
) 0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 70
(
 #";                                  (value-of-cps expression env^ k^)"
 #")]"
) 0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 12 #"mult-outer-k"
0 0 24 3 1 #" "
0 0 14 3 6 #"nexp2^"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 15 #"kt_mult-inner-k"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 6 #"nexp2^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 39 #";[(sub1-constructor-k k^) (let* ([k k^]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 50 #";                                [var (sub1 var)])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 45 #";                           (apply-k k var))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 18 #"sub1-constructor-k"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 7 #"apply-k"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 39 #";[(zero-constructor-k k^) (let* ([k k^]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 51 #";                                [var (zero? var)])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 46 #";                            (apply-k k var))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 18 #"zero-constructor-k"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 7 #"apply-k"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 41 #";[(if-constructor-k conseq^ alt^ env^ k^)"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 9 #"; (if var"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 34 #";     (let* ([expression conseq^])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 42 #";       (value-of-cps expression env^ k^))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 31 #";     (let* ([expression alt^])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 42 #";       (value-of-cps expression env^ k^))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 8 #";     )]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 16 #"if-constructor-k"
0 0 24 3 1 #" "
0 0 14 3 7 #"conseq^"
0 0 24 3 1 #" "
0 0 14 3 4 #"alt^"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 7 #"conseq^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"alt^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 35 #";[(throw-inner-k v^) (let* ([k v^])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 40 #";                      (apply-k k var))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 13 #"throw-inner-k"
0 0 24 3 1 #" "
0 0 14 3 2 #"v^"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 2 #"v^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 7 #"apply-k"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 63
#";[(throw-outer-k kexp^ env^) (let* ([k^ (kt_throw-inner-k var)]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 55 #";                                   [expression kexp^])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 66
#";                              (value-of-cps expression env^ k^))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 13 #"throw-outer-k"
0 0 24 3 1 #" "
0 0 14 3 5 #"kexp^"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 16 #"kt_throw-inner-k"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 5 #"kexp^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 35 #";[(let-constructor-k body^ env^ k^)"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 53 #"; (value-of-cps body^ (envr_extend-env var env^) k^)]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 17 #"let-constructor-k"
0 0 24 3 1 #" "
0 0 14 3 5 #"body^"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 15 #"envr_extend-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 5 #"body^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 43 #";[(app-inner-k var^ k^) (let* ([clos^ var^]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 41 #";                               [a^ var])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 56 #";                          (apply-closure clos^ a^ k^))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 11 #"app-inner-k"
0 0 24 3 1 #" "
0 0 14 3 4 #"var^"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 3 #") ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"a^"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 5 #"clos^"
0 0 24 3 1 #" "
0 0 14 3 4 #"var^"
0 0 24 3 46 #")                                             "
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 13 #"apply-closure"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 65
#";[(app-outer-k rand^ env^ k^) (let* ([k^ (kt_app-inner-k var k^)]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 56 #";                                    [expression rand^])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 67
#";                               (value-of-cps expression env^ k^))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 11 #"app-outer-k"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand^"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 4 #")  ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 14 #"kt_app-inner-k"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 2 #"k^"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"env^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand^"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-label"
0 0 24 3 1 #" "
0 0 14 3 4 #"main"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 10 #"kt_empty-k"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 14 #"envr_empty-env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 8 #"expr_let"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 11 #"expr_lambda"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 11 #"expr_lambda"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 7 #"expr_if"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 9 #"expr_zero"
0 0 24 3 2 #" ("
0 0 14 3 8 #"expr_var"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 10 #"expr_const"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 9 #"expr_mult"
0 0 24 3 2 #" ("
0 0 14 3 8 #"expr_var"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 8 #"expr_app"
0 0 24 3 2 #" ("
0 0 14 3 8 #"expr_app"
0 0 24 3 2 #" ("
0 0 14 3 8 #"expr_var"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"expr_var"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                ("
0 0 14 3 9 #"expr_sub1"
0 0 24 3 2 #" ("
0 0 14 3 8 #"expr_var"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 9 #"expr_mult"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 10 #"expr_letcc"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 8 #"expr_app"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 8 #"expr_app"
0 0 24 3 2 #" ("
0 0 14 3 8 #"expr_var"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"expr_var"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 10 #"expr_throw"
0 0 24 3 2 #" ("
0 0 14 3 8 #"expr_var"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 8 #"expr_app"
0 0 24 3 2 #" ("
0 0 14 3 8 #"expr_app"
0 0 24 3 2 #" ("
0 0 14 3 8 #"expr_var"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"expr_var"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 61
#"                                                            ("
0 0 14 3 10 #"expr_const"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 10 #"expr_const"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-of-cps"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"mount-trampoline"
0 0 24 3 1 #" "
0 0 14 3 10 #"kt_empty-k"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"Fact"
0 0 19 3 1 #" "
0 0 19 3 2 #"5:"
0 0 19 3 6 #" ~s\\n\""
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";(main)"
0           0
