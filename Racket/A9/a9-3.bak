#lang racket
(require "parenthec.rkt")
;union expr:
(define-union expr
  (const cexp)
  (var n)
  (if test conseq alt)
  (mult nexp1 nexp2)
  (sub1 nexp)
  (zero nexp)
  (letcc body)
  (throw kexp vexp)
  (let exp body)              
  (lambda body)
  (app rator rand))

;envs:
(define-union envr
  (empty-env)
  (extend-env a^ env^))
(define apply-env
  (lambda (env y^ k^) 
   (union-case env envr
      [(extend-env a^ env^) (if (zero? y^) (apply-k k^ a^) (apply-env env^ (sub1 y^) k^))]
      [(empty-env) (error 'value-of "unbound identifier")])))
;closures:
(define-union clos
  (closure body env))
(define apply-closure
  (lambda (clos_ a^ k^)
   (union-case clos_ clos
     ;;[`(closure ,body ,env) (value-of-cps body (extend-env a env) k)]
     [(closure body^ env^) (value-of-cps body^ (envr_extend-env a^ env^) k^)])))

;continuations:
(define empty-k
  (lambda ()
    `(empty-k)))

(define mult-inner-k
  (lambda (var^ k^)
    `(mult-inner-k ,var^ ,k^)))
(define mult-outer-k
  (lambda (x2^ env^ k^)
    `(mult-outer-k ,x2^ ,env^ ,k^)))

(define sub1-constructor-k
  (lambda (k^)
    `(sub1-constructor-k ,k^)))

(define zero-constructor-k
  (lambda (k^)
    `(zero-constructor-k ,k^)))

(define if-constructor-k
  (lambda (conseq^ alt^ env^ k^)
    `(if-constructor-k ,conseq^ ,alt^ ,env^ ,k^)))

(define throw-inner-k
  (lambda (v^)
    `(throw-inner-k ,v^)))
(define throw-outer-k
  (lambda (k-exp^ env^)
    `(throw-outer-k ,k-exp^ ,env^)))

(define let-constructor-k
  (lambda (body^ env^ k^)
    `(let-constructor-k ,body^ ,env^ ,k^)))

(define app-inner-k
  (lambda (v^ k^)
    `(app-inner-k ,v^ ,k^)))
(define app-outer-k
  (lambda (rand^ env^ k^)
    `(app-outer-k ,rand^ ,env^ ,k^)))

;valof:
(define value-of-cps
  (lambda (expression env^ k^)
    (union-case expression expr
                [(const expr) (apply-k k^ expr)]
                [(mult x1 x2) (value-of-cps x1 env^ (mult-outer-k x2 env^ k^))]
                [(sub1 x) (value-of-cps x env^ (sub1-constructor-k k^))]
                [(zero x) (value-of-cps x env^ (zero-constructor-k k^))]
                [(if test conseq alt) (value-of-cps test env^ (if-constructor-k conseq alt env^ k^))]
                [(letcc body) (value-of-cps body (envr_extend-env k^ env^) k^)]
                [(throw k-exp v-exp) (value-of-cps k-exp env^ (throw-outer-k v-exp env^))]
                [(let e body) (value-of-cps e env^ (let-constructor-k body env^ k^))]
                [(var expr) (apply-env env^ expr k^)]
                [(lambda body) (apply-k k^ (clos_closure body env^))]
                [(app rator rand) (value-of-cps rator env^ (app-outer-k rand env^ k^))]
      )))
;apply continuation:
(define apply-k
  (lambda (k var)
    (match k
      [`(empty-k) var]
      [`(mult-inner-k ,var^ ,k^) (apply-k k^ (* var var^))]
      [`(mult-outer-k ,x2^ ,env^ ,k^) (value-of-cps x2^ env^ (mult-inner-k var k^))]
      [`(sub1-constructor-k ,k^) (apply-k k^ (sub1 var))]
      [`(zero-constructor-k ,k^) (apply-k k^ (zero? var))]
      [`(if-constructor-k ,conseq^ ,alt^ ,env^ ,k^)
       (if var (value-of-cps conseq^ env^ k^) (value-of-cps alt^ env^ k^))]
      [`(throw-inner-k ,v^) (apply-k v^ var)]
      [`(throw-outer-k ,k-exp^ ,env^) (value-of-cps k-exp^ env^ (throw-inner-k var))]
      [`(let-constructor-k ,body^ ,env^ ,k^) (value-of-cps body^ (envr_extend-env var env^) k^)]
      [`(app-inner-k ,var^ ,k^) (apply-closure var^ var k^)]
      [`(app-outer-k ,rand^ ,env^ ,k^) (value-of-cps rand^ env^ (app-inner-k var k^))]
      )))

;main:
;; (let ((f (lambda (f)
;;   	      (lambda (n)
;; 	        (if (zero? n) 
;; 		    1
;; 	            (* n ((f f) (sub1 n))))))))
;;   (* (letcc k ((f f) (throw k ((f f) 4)))) 5))
(define main 
  (lambda ()
    (value-of-cps 
     (expr_let 
      (expr_lambda
       (expr_lambda 
        (expr_if
         (expr_zero (expr_var 0))
         (expr_const 1)
         (expr_mult (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_sub1 (expr_var 0)))))))
      (expr_mult
       (expr_letcc
        (expr_app
         (expr_app (expr_var 1) (expr_var 1))
         (expr_throw (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_const 4)))))
       (expr_const 5)))
     (envr_empty-env)
     (empty-k))))
(main)