#lang racket

(require "mk.rkt")
(require "numbers.rkt")

; Part1:

;; 1 What is the value of 
;(run 2 (q)
;  (== 5 q)
;  (conde
;   [(conde 
;     [(== 5 q)
;      (== 6 q)])
;    (== 5 q)]
;   [(== q 5)]))
;The answer is:
;'(5)
;Explanation: 
; (== 5 q) associates 5 with q
; first part of of the 1st conde fails because its first line,i.e. the 2nd conde,
; associates 6 with q,but we set q to 5,it's inconsistant with (== 6 q)
; Then the second part of the first conde succeeds because (== q 5) succeeds
; Moreover, (run 2 (q)...) ask for a list of maximum of 2 results of q.
; Thus it returns '(5)

;; 2 What is the value of
;(run 1 (q)
;  (fresh (a b)
;    (== `(,a ,b) q)
;    (absento 'tag q)
;    (symbolo a)))
;The answer is:
;'(((_.0 _.1) (=/= ((_.0 tag))) (sym _.0) (absento (tag _.1))))
;Explanation:
; The fresh introduces logic variables a and b
; (== `(,a ,b) q): associates `(,a ,b) with q (a,b are reified values)
; (_.0 _.1) means any two things
; (absento 'tag q): symbol 'tag does not occur in q, so we have (absento (tag _.1))
; (symbolo a): a is a symbol, so we have '(=/= ((_.0 tag))) and (sym _.0)
; Moreover, (run 1 (q)...) ask for a list of maximum of 1 results of q.
; Thus it returns '(((_.0 _.1) (=/= ((_.0 tag))) (sym _.0) (absento (tag _.1))))


;; 3 What do the following miniKanren constraints mean?
;; a == means equal to.
;; b =/= means not equal to.
;; c absento means no occurance.
;; d numbero means it is a number.
;; e symbolo means it is a symbol.

;Part 2:
(define assoco
  (lambda (x ls o)
    (fresh (a d aa da)
           (== `(,a . ,d) ls)
           (== `(,aa . ,da) a)
           (conde
            ((== aa x) (== a o))
            ((=/= aa x) (assoco x d o))))))

(define reverseo
  (lambda (ls o)
    (conde
     ((== '() ls) (== '() o))
     ((fresh (a d res)
             (== `(,a . ,d) ls)
             (reverseo d res)
             (appendo res `(,a) o))))))

(define stuttero
  (lambda (ls o)
    (conde
      ((== '() ls) (== '() o))
      ((fresh (a d res)
              (== `(,a . ,d) ls)
              (stuttero d res)
              (== o `(,a ,a . ,res)))))))

(define lengtho
  (lambda (ls o)
    (conde
     ((== '() ls) (== '() o))
     ((fresh (a d res)
             (== `(,a . ,d) ls)
             (lengtho d res)
             (pluso '(1) res o))))))